This is an example of dynamic programming. My first attempt at this problem was using recursion, which
worked but, if we consider that this problem essentially creates a decision tree for us(how many steps
if we take 1, how many if we take two, then so on), this would take a long time because we end up
computing the same calculations over an over, unnecesserally. Instead, this problem can be approached
using memoization, where we just compute these calculations once. For instance:
If n = 4
- If we take 1 step, we're a step 1. From there, we can take 1 or 2 steps again, if we take 1 step, we're
a step 2, if we take 2, we're a step 3; from step 3, if we take 1, we're at 4, which is our goal; if we take two, 
we're at 5, i.e out of bounds. Now back to step 2, if we take 1, we'd be a step 3, if we take 2, we're at
4, which is our goal. Within this tree, from step 3, if we take 1, we're at 4, which is our goal; if we take two, 
we're at 5, i.e out of bounds.

See how we compute what would happen a step 3 twice. This would occur in the other half of the tree as well(this
is only the first half, considering what could happen if our initial step is 1), and it would become very costly, 
especially with big numbers. This recursive approach would have a time complexity of 0(2^n).

Now, following the approach in the solution, what we did instead is:
1. If n is 1 or 2, return n. To get to 1 step there's only one way. To get to two only two: 1 + 1 or 2 at once.
Otherwise, we create two pointers for one and two steps. This is top to bottom approach, where instead of starting
from 0, we start from n. As we loop, we add the number of possible ways to get to n that each side of the decision
tree offers, then return the sum of them(one + two). This solution has linear time complexity, or O(n), a big improvement
over my initial approach.